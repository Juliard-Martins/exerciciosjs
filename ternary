function ternarySearch(arr, target) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        // Divide o intervalo em 3 partes
        let mid1 = left + Math.floor((right - left) / 3);
        let mid2 = right - Math.floor((right - left) / 3);

        // Verifica se o alvo está em uma das duas posições intermediárias
        if (arr[mid1] === target) {
            return mid1;
        }
        if (arr[mid2] === target) {
            return mid2;
        }

        // Ajusta os limites de busca dependendo da comparação
        if (target < arr[mid1]) {
            right = mid1 - 1; // Ajusta a busca para a primeira parte
        } else if (target > arr[mid2]) {
            left = mid2 + 1; // Ajusta a busca para a última parte
        } else {
            left = mid1 + 1; // Ajusta a busca para a parte do meio
            right = mid2 - 1;
        }
    }

    return -1; // Elemento não encontrado
}

const arr = [1, 3, 4, 6, 8, 12, 15, 18, 21, 25, 30];

console.log(ternarySearch(arr, 15)); // Saída: 6
console.log(ternarySearch(arr, 100)); // Saída: -1

// Análise de Desempenho
Ternary Search:
O Ternary Search divide a lista em três partes a cada iteração. Isso pode ser mais vantajoso em certos cenários onde o número de comparações pode ser menor para listas muito específicas, mas, em termos gerais, a complexidade de tempo permanece 
𝑂 que é mais lento que o Binary Search
​n) devido à maior quantidade de comparações em cada iteração.
Binary Search:
O Binary Search é mais eficiente em termos de número de comparações, pois divide a lista em duas partes a cada iteração, o que resulta em uma complexidade de 
 n). Para listas grandes, o Binary Search tende a ser mais rápido devido à sua menor quantidade de comparações por iteração.
