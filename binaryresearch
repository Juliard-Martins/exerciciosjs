function binarySearch(arr, target) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (arr[mid] === target) {
            return mid; // Elemento encontrado
        } else if (arr[mid] < target) {
            left = mid + 1; // Ignora a metade esquerda
        } else {
            right = mid - 1; // Ignora a metade direita
        }
    }

    return -1; // Elemento não encontrado
}

// Exemplo de uso:
const arr = [2, 4, 6, 8, 10, 12, 14];
const target = 10;

const result = binarySearch(arr, target);
console.log(result); // Saída: 4


//////// 
Por que a lista deve estar ordenada?
O Binary Search depende de comparações sequenciais com o elemento do meio da lista. Se a lista não estiver ordenada, o algoritmo não consegue determinar de forma confiável qual metade contém o elemento-alvo. Isso ocorre porque, sem ordenação, não há garantia de que os elementos menores estarão à esquerda e os maiores à direita.

Lista Ordenada
const arr = [1, 3, 5, 7, 9];
binarySearch(arr, 5); // Resultado: 2 (índice do elemento 5)

Lista não ordenada 
const arr = [9, 1, 5, 7, 3];
binarySearch(arr, 5); // Resultado: -1 (resultado incorreto)
