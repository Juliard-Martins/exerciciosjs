<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algoritmos de Busca e Ordenação</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        label, select {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Algoritmos de Busca e Ordenação</h1>
    
    <div>
        <label for="algoritmoBusca">Escolha o Algoritmo de Busca:</label>
        <select id="algoritmoBusca">
            <option value="binary">Binary Search</option>
            <option value="interpolation">Interpolation Search</option>
        </select>
    </div>

    <div>
        <label for="algoritmoOrdenacao">Escolha o Algoritmo de Ordenação:</label>
        <select id="algoritmoOrdenacao">
            <option value="bubble">Bubble Sort</option>
            <option value="selection">Selection Sort</option>
            <option value="merge">Merge Sort</option>
            <option value="quick">Quick Sort</option>
        </select>
    </div>

    <div>
        <label for="lista">Insira os elementos da lista (separados por vírgula):</label>
        <input type="text" id="lista" placeholder="Ex: 4, 7, 2, 9, 5">
    </div>

    <div>
        <label for="elemento">Insira o elemento a ser buscado:</label>
        <input type="number" id="elemento" placeholder="Ex: 7">
    </div>

    <button onclick="executar()">Executar</button>

    <h2>Resultado:</h2>
    <pre id="resultado"></pre>

    <script>
        function bubbleSort(arr) {
            let n = arr.length;
            for (let i = 0; i < n - 1; i++) {
                for (let j = 0; j < n - i - 1; j++) {
                    if (arr[j] > arr[j + 1]) {
                        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                    }
                }
            }
            return arr;
        }

        function selectionSort(arr) {
            for (let i = 0; i < arr.length - 1; i++) {
                let minIdx = i;
                for (let j = i + 1; j < arr.length; j++) {
                    if (arr[j] < arr[minIdx]) {
                        minIdx = j;
                    }
                }
                [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];
            }
            return arr;
        }

        function mergeSort(arr) {
            if (arr.length <= 1) return arr;
            const mid = Math.floor(arr.length / 2);
            const left = mergeSort(arr.slice(0, mid));
            const right = mergeSort(arr.slice(mid));
            return merge(left, right);
        }

        function merge(left, right) {
            let result = [];
            let i = 0, j = 0;
            while (i < left.length && j < right.length) {
                if (left[i] < right[j]) {
                    result.push(left[i]);
                    i++;
                } else {
                    result.push(right[j]);
                    j++;
                }
            }
            return result.concat(left.slice(i), right.slice(j));
        }

        function quickSort(arr) {
            if (arr.length <= 1) return arr;
            const pivot = arr[arr.length - 1];
            let left = [], right = [];
            for (let i = 0; i < arr.length - 1; i++) {
                if (arr[i] < pivot) left.push(arr[i]);
                else right.push(arr[i]);
            }
            return [...quickSort(left), pivot, ...quickSort(right)];
        }

        function binarySearch(arr, element) {
            let low = 0, high = arr.length - 1;
            while (low <= high) {
                let mid = Math.floor((low + high) / 2);
                if (arr[mid] === element) return mid;
                else if (arr[mid] < element) low = mid + 1;
                else high = mid - 1;
            }
            return -1;
        }

        function interpolationSearch(arr, element) {
            let low = 0, high = arr.length - 1;
            while (low <= high && element >= arr[low] && element <= arr[high]) {
                if (low === high) {
                    if (arr[low] === element) return low;
                    return -1;
                }
                let pos = low + Math.floor(((element - arr[low]) * (high - low)) / (arr[high] - arr[low]));
                if (arr[pos] === element) return pos;
                else if (arr[pos] < element) low = pos + 1;
                else high = pos - 1;
            }
            return -1;
        }

        function executar() {
            const listaInput = document.getElementById("lista").value;
            const elemento = parseInt(document.getElementById("elemento").value);
            const algoritmoBusca = document.getElementById("algoritmoBusca").value;
            const algoritmoOrdenacao = document.getElementById("algoritmoOrdenacao").value;

            const lista = listaInput.split(",").map(item => parseInt(item.trim()));

            // Ordenação
            let listaOrdenada;
            const startSort = performance.now();
            switch (algoritmoOrdenacao) {
                case "bubble":
                    listaOrdenada = bubbleSort([...lista]);
                    break;
                case "selection":
                    listaOrdenada = selectionSort([...lista]);
                    break;
                case "merge":
                    listaOrdenada = mergeSort([...lista]);
                    break;
                case "quick":
                    listaOrdenada = quickSort([...lista]);
                    break;
            }
            const endSort = performance.now();
            const timeSort = (endSort - startSort).toFixed(4);

            // Busca
            let resultadoBusca = -1;
            const startSearch = performance.now();
            switch (algoritmoBusca) {
                case "binary":
                    resultadoBusca = binarySearch(listaOrdenada, elemento);
                    break;
                case "interpolation":
                    resultadoBusca = interpolationSearch(listaOrdenada, elemento);
                    break;
            }
            const endSearch = performance.now();
            const timeSearch = (endSearch - startSearch).toFixed(4);

            // Exibir resultados
            const resultado = `
            Lista ordenada: [${listaOrdenada.join(", ")}]
            Tempo de ordenação: ${timeSort} ms

            Resultado da busca pelo elemento ${elemento}: ${resultadoBusca === -1 ? "Não encontrado" : "Encontrado no índice " + resultadoBusca}
            Tempo de busca: ${timeSearch} ms
            `;
            document.getElementById("resultado").textContent = resultado;
        }
    </script>
</body>
</html>
